{
  "name": "decorator",
  "summary": "In its simplest form, a decorator is simply a way of wrapping one piece of code with another — literally “decorating” it. [graham.cox]",
  "description": [
    "The Decorator pattern extends (decorates) an object’s behavior dynamically. The ability to add new behavior at runtime is accomplished by a Decorator object which ‘wraps itself’ around the original object. Multiple decorators can add or override functionality to the original object. [do.factory]",
    "Decorators are a structural design pattern that aim to **promote code reuse. Similar to Mixins**, they can be considered another viable alternative to object subclassing. Classically, Decorators offered the ability to add behavior to existing classes in a system dynamically. The idea was that the decoration itself was not essential to the base functionality of the class; otherwise, it would be baked into the superclass itself. [addy.osmani]",
    "In its simplest form, a decorator is simply a way of wrapping one piece of code with another — literally “decorating” it. This is a concept you might well have heard of previously as **functional composition**, or **higher-order functions**. [graham.cox]",
    "Decorators are a proposal for extending JavaScript classes which is widely adopted among developers in transpiler environments, with broad interest in standardization. TC39 has been iterating on decorators proposals for over five years. [tc39.proposal.decorators]",
    "Decorators are helpful for anything you want to transparently wrap with extra functionality. These include memoization, enforcing access control and authentication, instrumentation and timing functions, logging, rate-limiting, and the list goes on. [addy.osmani.medium]",
    "With the introduction of Classes in TypeScript and ES6, there now exist certain scenarios that require additional features to support annotating or modifying classes and class members. Decorators provide a way to add both annotations and a meta-programming syntax for class declarations and members. Decorators are a stage 2 proposal for JavaScript and are available as an experimental feature of TypeScript. [typescript]"
  ],
  "category": "structural",
  "problem": [
    "Decorators provide flexibility to statically typed languages by allowing runtime changes as opposed to inheritance which takes place at compile time. **JavaScript, however, is a dynamic language and the ability to extend an object at runtime is baked into the language itself.  For this reason, the Decorator pattern is less relevant to JavaScript developers**. In JavaScript the Extend and Mixin patterns subsume the Decorator pattern. [do.factory]",
    "A common reason why developers use them is that their applications may contain features requiring a large quantity of distinct types of object. Imagine having to define hundreds of different object constructors for, say, a JavaScript game. [addy.osmani]",
    "Whilst functional composition is already possible in JavaScript, it’s significantly more difficult — or even impossible — to apply the same techniques to other pieces of code (e.g. classes and class properties). [graham.cox]"
  ],
  "example": ["class","function","stage.2.decorator"],
  "refs": {
    "javascript": {
      "do.factory": "https://www.dofactory.com/javascript/design-patterns/decorator",
      "addy.osmani": "https://addyosmani.com/resources/essentialjsdesignpatterns/book/",
      "graham.cox": "https://www.sitepoint.com/javascript-decorators-what-they-are/",
      "tc39.proposal.decorators": "https://github.com/tc39/proposal-decorators",
      "addy.osmani.medium": "https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841",
      "typescript": "https://www.typescriptlang.org/docs/handbook/decorators.html"
    },
    "misc": {}
  }
}
